import React, { useState, useContext } from 'react';
import { 
  Box, Typography, Grid, Tabs, Tab, InputBase, 
  Divider, IconButton, useTheme, alpha, Fade,
  Chip, Menu, MenuItem, ListItemIcon, ListItemText,
  Button, Paper
} from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import FilterListIcon from '@mui/icons-material/FilterList';
import BookmarksIcon from '@mui/icons-material/Bookmarks';
import LockOutlinedIcon from '@mui/icons-material/LockOutlined';
import HighlightOffIcon from '@mui/icons-material/HighlightOff';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';
import SecurityIcon from '@mui/icons-material/Security';
import { ThemeContext } from '../../context/ThemeContext';
// Import components
import VulnerabilityCard from './VulnerabilityCard';
// Import the vulnerability data
import { vulnerabilities, sansVulnerabilities, advancedVulnerabilities } from '../data/vulnerabilitiesData';

const VulnerabilityList = () => {
  const theme = useTheme();
  const { darkMode } = useContext(ThemeContext);
  
  // State management
  const [tabValue, setTabValue] = useState(0);
  const [searchTerm, setSearchTerm] = useState('');
  const [bookmarkedVulnerabilities, setBookmarkedVulnerabilities] = useState([]);
  const [filterAnchorEl, setFilterAnchorEl] = useState(null);
  const [selectedFilters, setSelectedFilters] = useState([]);
  
  // Filter menu state
  const filterMenuOpen = Boolean(filterAnchorEl);
  
  // Severity options for filter
  const severityOptions = ['Critical', 'High', 'Medium', 'Low'];
  
  // Handle tab change
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };
  
  // Toggle bookmark for a vulnerability
  const toggleBookmark = (vulnerabilityId) => {
    setBookmarkedVulnerabilities(prev => 
      prev.includes(vulnerabilityId)
        ? prev.filter(id => id !== vulnerabilityId)
        : [...prev, vulnerabilityId]
    );
  };
  
  // Open filter menu
  const handleFilterClick = (event) => {
    setFilterAnchorEl(event.currentTarget);
  };
  
  // Close filter menu
  const handleFilterClose = () => {
    setFilterAnchorEl(null);
  };
  
  // Toggle a filter selection
  const toggleFilter = (filter) => {
    setSelectedFilters(prev => 
      prev.includes(filter)
        ? prev.filter(f => f !== filter)
        : [...prev, filter]
    );
  };
  
  // Clear all filters
  const clearFilters = () => {
    setSelectedFilters([]);
    setSearchTerm('');
    handleFilterClose();
  };
  
  // Get appropriate data based on current tab
  const getVulnerabilitiesForTab = () => {
    switch(tabValue) {
      case 0: // OWASP Top 10
        return vulnerabilities;
      case 1: // SANS/Additional
        return sansVulnerabilities;
      case 2: // Advanced
        return advancedVulnerabilities;
      case 3: // Bookmarked
        return [...vulnerabilities, ...sansVulnerabilities, ...advancedVulnerabilities]
          .filter(vuln => bookmarkedVulnerabilities.includes(vuln.id));
      default:
        return vulnerabilities;
    }
  };
  
  // Filter vulnerabilities based on search and selected filters
  const filteredVulnerabilities = getVulnerabilitiesForTab().filter(vuln => {
    // Search term filter
    const matchesSearch = searchTerm === '' || 
      vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) || 
      vuln.description.toLowerCase().includes(searchTerm.toLowerCase());
    
    // If no severity filters are selected, show all vulnerabilities
    const matchesSeverity = selectedFilters.length === 0 || 
      (vuln.severity && selectedFilters.includes(vuln.severity));
    
    return matchesSearch && matchesSeverity;
  });
  
  return (
    <Paper elevation={4} sx={{ 
      width: '100%',
      backgroundColor: 'transparent',
      background: darkMode 
        ? 'linear-gradient(135deg, rgba(13, 21, 36, 0.95) 0%, rgba(25, 48, 115, 0.95) 100%)' 
        : 'linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(240, 245, 255, 0.95) 100%)',
      borderRadius: 3,
      overflow: 'hidden',
      transition: 'all 0.3s ease-in-out',
      boxShadow: darkMode
        ? '0 15px 40px rgba(0, 0, 0, 0.3), 0 0 2px rgba(0, 0, 0, 0.5) inset'
        : '0 15px 40px rgba(0, 0, 0, 0.1), 0 0 2px rgba(255, 255, 255, 0.8) inset',
      border: `1px solid ${darkMode ? 'rgba(255, 255, 255, 0.08)' : 'rgba(255, 255, 255, 0.4)'}`,
      backdropFilter: 'blur(8px)'
    }}>
      {/* Header */}
      <Box sx={{ 
        p: 3, 
        pb: 2,
        background: darkMode 
          ? `linear-gradient(145deg, rgba(13, 21, 36, 0.9) 0%, rgba(25, 48, 115, 0.9) 100%)`
          : `linear-gradient(145deg, rgba(43, 115, 246, 0.9) 0%, rgba(28, 72, 180, 0.9) 100%)`,
        color: 'white',
        boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)'
      }}>
        <Typography variant="h4" component="h1" fontWeight="bold" sx={{
          fontSize: { xs: '1.75rem', sm: '2rem' },
          letterSpacing: '-0.01em',
          textShadow: '0px 2px 4px rgba(0, 0, 0, 0.2)'
        }}>
          Web Security Vulnerabilities
        </Typography>
        <Typography variant="subtitle1" sx={{ 
          opacity: 0.9,
          fontSize: { xs: '0.9rem', sm: '1rem' },
          textShadow: '0px 1px 2px rgba(0, 0, 0, 0.2)'
        }} gutterBottom>
          Explore and understand common web application security risks
        </Typography>
      </Box>
      
      {/* Tabs */}
      <Box sx={{ 
        borderBottom: 1, 
        borderColor: darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)',
        background: darkMode ? 'rgba(0, 0, 0, 0.1)' : 'rgba(255, 255, 255, 0.5)'
      }}>
        <Tabs 
          value={tabValue} 
          onChange={handleTabChange}
          variant="scrollable"
          scrollButtons="auto"
          indicatorColor="primary"
          textColor="primary"
          aria-label="vulnerability categories"
          sx={{ 
            px: 1,
            '& .MuiTab-root': {
              fontWeight: 600,
              textTransform: 'none',
              py: 2,
              color: darkMode ? 'rgba(255, 255, 255, 0.8)' : 'rgba(0, 0, 0, 0.7)'
            },
            '& .Mui-selected': {
              color: darkMode ? 'rgba(73, 207, 255, 1)' : theme.palette.primary.main
            },
            '& .MuiTabs-indicator': {
              backgroundColor: darkMode ? 'rgba(73, 207, 255, 0.9)' : theme.palette.primary.main
            }
          }}
        >
          <Tab label="OWASP Top 10" icon={<ErrorOutlineIcon />} iconPosition="start" />
          <Tab label="SANS Top 25" icon={<CheckCircleOutlineIcon />} iconPosition="start" />
          <Tab label="Advanced" icon={<SecurityIcon />} iconPosition="start" />
          <Tab 
            label="Bookmarked" 
            icon={<BookmarksIcon />} 
            iconPosition="start"
            disabled={bookmarkedVulnerabilities.length === 0}
          />
        </Tabs>
      </Box>
      
      {/* Search and Filters */}
      <Box sx={{ p: 2, display: 'flex', alignItems: 'center' }}>
        <Paper
          elevation={0}
          sx={{
            p: '2px 4px',
            display: 'flex',
            alignItems: 'center',
            width: '100%',
            border: 1,
            borderColor: darkMode ? 'rgba(255, 255, 255, 0.15)' : 'rgba(0, 0, 0, 0.1)',
            borderRadius: 2,
            backgroundColor: darkMode ? alpha(theme.palette.grey[900], 0.6) : alpha(theme.palette.common.white, 0.8),
            backdropFilter: 'blur(4px)',
            boxShadow: darkMode 
              ? 'inset 0 1px 3px rgba(0, 0, 0, 0.3)' 
              : 'inset 0 1px 3px rgba(0, 0, 0, 0.05)'
          }}
        >
          <IconButton sx={{ p: '10px' }} color="primary">
            <SearchIcon />
          </IconButton>
          <InputBase
            sx={{ 
              ml: 1, 
              flex: 1,
              color: darkMode ? 'rgba(255, 255, 255, 0.9)' : 'inherit'
            }}
            placeholder="Search vulnerabilities..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          {searchTerm && (
            <IconButton sx={{ p: '10px' }} onClick={() => setSearchTerm('')}>
              <HighlightOffIcon />
            </IconButton>
          )}
          <Divider sx={{ height: 28, m: 0.5 }} orientation="vertical" />
          <IconButton 
            sx={{ p: '10px' }} 
            onClick={handleFilterClick}
            color={selectedFilters.length > 0 ? "primary" : "default"}
          >
            <FilterListIcon />
          </IconButton>
        </Paper>
      </Box>
      
      {/* Active filters */}
      {selectedFilters.length > 0 && (
        <Box sx={{ px: 2, pb: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
          {selectedFilters.map(filter => (
            <Chip 
              key={filter}
              label={filter}
              onDelete={() => toggleFilter(filter)}
              size="small"
              color="primary"
              variant="outlined"
              sx={{
                background: darkMode ? 'rgba(73, 207, 255, 0.1)' : 'rgba(43, 115, 246, 0.1)',
                borderColor: darkMode ? 'rgba(73, 207, 255, 0.4)' : 'rgba(43, 115, 246, 0.4)',
              }}
            />
          ))}
          <Chip 
            label="Clear All"
            onClick={clearFilters}
            size="small"
            color="secondary"
            sx={{
              fontWeight: 500
            }}
          />
        </Box>
      )}
      
      {/* Filter Menu */}
      <Menu
        anchorEl={filterAnchorEl}
        open={filterMenuOpen}
        onClose={handleFilterClose}
        PaperProps={{
          elevation: 4,
          sx: { 
            minWidth: 200,
            maxWidth: 300,
            mt: 1.5,
            p: 1,
            borderRadius: 2,
            backgroundColor: darkMode ? 'rgba(13, 21, 36, 0.95)' : 'white',
            backdropFilter: 'blur(10px)',
            border: `1px solid ${darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.05)'}`,
          }
        }}
        TransitionComponent={Fade}
        transitionDuration={250}
      >
        <Typography variant="subtitle2" sx={{ 
          px: 2, 
          py: 1, 
          fontWeight: 'bold',
          color: darkMode ? 'rgba(255, 255, 255, 0.9)' : 'inherit'
        }}>
          Filter by Severity
        </Typography>
        {severityOptions.map(severity => (
          <MenuItem key={severity} onClick={() => toggleFilter(severity)} sx={{
            borderRadius: 1,
            '&:hover': {
              backgroundColor: darkMode ? 'rgba(73, 207, 255, 0.1)' : 'rgba(43, 115, 246, 0.05)'
            }
          }}>
            <ListItemIcon>
              {selectedFilters.includes(severity) ? (
                <CheckCircleOutlineIcon fontSize="small" color="primary" />
              ) : (
                <div style={{ width: 24 }} />
              )}
            </ListItemIcon>
            <ListItemText primary={severity} sx={{
              color: darkMode ? 'rgba(255, 255, 255, 0.9)' : 'inherit'
            }} />
          </MenuItem>
        ))}
        <Divider sx={{ my: 1, borderColor: darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.08)' }} />
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', px: 1 }}>
          <Button size="small" onClick={clearFilters} color="secondary">
            Clear Filters
          </Button>
        </Box>
      </Menu>
      
      {/* Tab Headers */}
      {tabValue === 2 && (
        <Box sx={{ 
          px: 3, 
          py: 2, 
          backgroundColor: darkMode ? 'rgba(0, 0, 0, 0.2)' : 'rgba(43, 115, 246, 0.05)',
          borderBottom: `1px solid ${darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.05)'}`,
        }}>
          <Typography variant="h6" fontWeight="600" color={darkMode ? 'rgba(73, 207, 255, 0.9)' : theme.palette.primary.main}>
            Advanced Vulnerabilities
          </Typography>
          <Typography variant="body2" color={darkMode ? 'rgba(255, 255, 255, 0.7)' : 'text.secondary'}>
            Specialized security vulnerabilities for advanced penetration testing and security analysis
          </Typography>
        </Box>
      )}
      
      {/* Vulnerability Cards */}
      <Box sx={{ 
        p: 2, 
        pt: 1,
        backgroundColor: darkMode ? 'rgba(13, 21, 36, 0.3)' : 'rgba(255, 255, 255, 0.3)',
        minHeight: '60vh'
      }}>
        <Grid container spacing={2}>
          {filteredVulnerabilities.map((vuln) => (
            <Grid item xs={12} sm={6} md={4} key={vuln.id}>
              <VulnerabilityCard 
                vulnerability={vuln}
                isBookmarked={bookmarkedVulnerabilities.includes(vuln.id)}
                onToggleBookmark={() => toggleBookmark(vuln.id)}
              />
            </Grid>
          ))}
        </Grid>
        
        {/* Empty state */}
        {filteredVulnerabilities.length === 0 && (
          <Box sx={{ 
            py: 6, 
            display: 'flex', 
            flexDirection: 'column', 
            alignItems: 'center',
            gap: 2,
            borderRadius: 2,
            backgroundColor: darkMode ? 'rgba(0, 0, 0, 0.2)' : 'rgba(255, 255, 255, 0.7)',
            backdropFilter: 'blur(4px)',
            border: `1px dashed ${darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'}`,
            mx: 'auto',
            maxWidth: '600px',
            width: '100%',
            mt: 4
          }}>
            <Typography variant="h6" color={darkMode ? 'rgba(255, 255, 255, 0.7)' : 'text.secondary'}>
              No vulnerabilities match your criteria
            </Typography>
            <Button 
              variant="contained" 
              startIcon={<HighlightOffIcon />}
              onClick={clearFilters}
              color="primary"
              sx={{ 
                mt: 2,
                background: darkMode 
                  ? 'linear-gradient(to right, rgba(73, 207, 255, 0.9), rgba(25, 48, 115, 0.9))' 
                  : 'linear-gradient(to right, rgba(43, 115, 246, 0.9), rgba(28, 72, 180, 0.9))',
                borderRadius: '8px',
                textTransform: 'none',
                fontWeight: 600,
                boxShadow: darkMode 
                  ? '0 4px 12px rgba(0, 0, 0, 0.3)' 
                  : '0 4px 12px rgba(43, 115, 246, 0.3)'
              }}
            >
              Clear All Filters
            </Button>
          </Box>
        )}
      </Box>
    </Paper>
  );
};

export default VulnerabilityList;