/**
 * Analyze and format vulnerability scan results
 */
const config = require('../config');

/**
 * Format scan result with consistent structure and enhanced details
 * @param {String} vulnerabilityType - Type of vulnerability
 * @param {Boolean} vulnerable - Whether vulnerability was detected
 * @param {String} details - Vulnerability details
 * @param {String} recommendation - Remediation recommendation
 * @param {Object} evidence - Evidence collected during scan
 * @returns {Object} - Formatted result object
 */
function formatResult(vulnerabilityType, vulnerable, details, recommendation, evidence = null) {
  const severity = config.VULNERABILITY_SEVERITY[vulnerabilityType] || 'medium';
  
  const result = {
    vulnerable,
    severity,
    details,
    recommendation,
    cwe: getCweForVulnerability(vulnerabilityType),
    references: getReferencesForVulnerability(vulnerabilityType)
  };
  
  // Add evidence if available and enabled
  if (config.INCLUDE_EVIDENCE && evidence) {
    // Truncate evidence if too long
    if (typeof evidence === 'string' && evidence.length > config.MAX_EVIDENCE_LENGTH) {
      result.evidence = evidence.substring(0, config.MAX_EVIDENCE_LENGTH) + '... (truncated)';
    } else {
      result.evidence = evidence;
    }
  }
  
  return result;
}

/**
 * Get CWE identifier for vulnerability type
 * @param {String} vulnerabilityType - Type of vulnerability
 * @returns {Object} - CWE identifier and name
 */
function getCweForVulnerability(vulnerabilityType) {
  const cweMap = {
    sql_injection: { id: 89, name: 'SQL Injection' },
    xss: { id: 79, name: 'Cross-site Scripting' },
    broken_authentication: { id: 287, name: 'Improper Authentication' },
    sensitive_data_exposure: { id: 311, name: 'Missing Encryption of Sensitive Data' },
    xxe: { id: 611, name: 'XML External Entity Reference' },
    insecure_deserialization: { id: 502, name: 'Deserialization of Untrusted Data' },
    security_misconfiguration: { id: 1021, name: 'Improper Restriction of Rendered UI Layers' },
    access_control_issues: { id: 284, name: 'Improper Access Control' },
    csrf: { id: 352, name: 'Cross-Site Request Forgery' },
    vulnerable_components: { id: 1104, name: 'Use of Unmaintained Third Party Components' },
    path_traversal: { id: 22, name: 'Path Traversal' },
    integer_overflow: { id: 190, name: 'Integer Overflow or Wraparound' },
    file_upload: { id: 434, name: 'Unrestricted Upload of File with Dangerous Type' },
    hardcoded_credentials: { id: 798, name: 'Use of Hard-coded Credentials' },
    output_neutralization: { id: 116, name: 'Improper Encoding or Escaping of Output' },
    missing_authentication: { id: 306, name: 'Missing Authentication for Critical Function' },
    buffer_overflow: { id: 120, name: 'Buffer Copy without Checking Size of Input' },
    memory_buffer: { id: 119, name: 'Improper Restriction of Operations within the Bounds of a Memory Buffer' },
    resource_consumption: { id: 400, name: 'Uncontrolled Resource Consumption' },
    input_validation: { id: 20, name: 'Improper Input Validation' },
    race_condition: { id: 362, name: 'Concurrent Execution using Shared Resource with Improper Synchronization' },
    certificate_validation: { id: 295, name: 'Improper Certificate Validation' },
    privilege_management: { id: 269, name: 'Improper Privilege Management' },
    authorization: { id: 285, name: 'Improper Authorization' },
    use_after_free: { id: 416, name: 'Use After Free' },
    insecure_design: { id: 1173, name: 'Improper Use of Validation Framework' },
    insufficient_logging: { id: 778, name: 'Insufficient Logging' },
    ssrf: { id: 918, name: 'Server-Side Request Forgery' },
    host_header_injection: { id: 644, name: 'Improper Neutralization of HTTP Headers for Scripting Syntax' },
    jwt_vulnerabilities: { id: 347, name: 'Improper Verification of Cryptographic Signature' },
    prototype_pollution: { id: 1321, name: 'Improperly Controlled Modification of Object Prototype Attributes' },
    nosql_injection: { id: 943, name: 'Improper Neutralization of Special Elements in Data Query Logic' }
  };
  
  return cweMap[vulnerabilityType] || { id: 0, name: 'Unknown Vulnerability' };
}

/**
 * Get references for vulnerability type
 * @param {String} vulnerabilityType - Type of vulnerability
 * @returns {Array} - List of references
 */
function getReferencesForVulnerability(vulnerabilityType) {
  const referenceMap = {
    sql_injection: [
      'https://owasp.org/www-community/attacks/SQL_Injection',
      'https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html'
    ],
    xss: [
      'https://owasp.org/www-community/attacks/xss/',
      'https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html'
    ],
    xxe: [
      'https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing',
      'https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html'
    ],
    broken_authentication: [
      'https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication',
      'https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html'
    ],
    // Add references for other vulnerabilities as needed
  };
  
  return referenceMap[vulnerabilityType] || [
    'https://owasp.org/www-project-top-ten/',
    'https://cwe.mitre.org/top25/archive/2021/2021_cwe_top25.html'
  ];
}

module.exports = {
  formatResult,
  getCweForVulnerability,
  getReferencesForVulnerability
};