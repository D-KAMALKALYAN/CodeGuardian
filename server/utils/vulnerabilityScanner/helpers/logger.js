/**
 * Logger utility for vulnerability scanner
 */
const config = require('../config');

// Define log levels
const LOG_LEVELS = {
  error: 0,
  warn: 1,
  info: 2,
  debug: 3
};

// Current log level from config
const currentLevel = LOG_LEVELS[config.LOG_LEVEL.toLowerCase()] || LOG_LEVELS.info;

/**
 * Internal logging function
 * @param {String} level - Log level
 * @param {String} message - Log message
 * @param {Object} [metadata] - Additional metadata
 */
function log(level, message, metadata = {}) {
  if (LOG_LEVELS[level] > currentLevel) {
    return;
  }

  const timestamp = new Date().toISOString();
  const logData = {
    timestamp,
    level,
    message,
    ...metadata
  };

  // In production, you might want to use a proper logging library
  if (level === 'error' || level === 'warn') {
    console.error(`[${timestamp}] [${level.toUpperCase()}] ${message}`);
    if (Object.keys(metadata).length > 0) {
      console.error(metadata);
    }
  } else {
    console.log(`[${timestamp}] [${level.toUpperCase()}] ${message}`);
    if (Object.keys(metadata).length > 0) {
      console.log(metadata);
    }
  }
}

module.exports = {
  error: (message, metadata) => log('error', message, metadata),
  warn: (message, metadata) => log('warn', message, metadata),
  info: (message, metadata) => log('info', message, metadata),
  debug: (message, metadata) => log('debug', message, metadata)
};