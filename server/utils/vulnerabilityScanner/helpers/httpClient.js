/**
 * Enhanced HTTP client with error handling and retries
 */
const axios = require('axios');
const { performance } = require('perf_hooks');
const logger = require('./logger');
const config = require('../config');

// Create axios instance with default configuration
const axiosInstance = axios.create({
  timeout: config.HTTP_TIMEOUT || 10000, // 10 seconds default
  maxRedirects: config.MAX_REDIRECTS || 5,
  validateStatus: status => status < 500, // Don't reject on 4xx responses
  headers: {
    'User-Agent': config.USER_AGENT || 'Security-Scanner/1.0',
  }
});

// Add request interceptor for logging and metrics
axiosInstance.interceptors.request.use(request => {
  request.meta = { startTime: performance.now() };
  return request;
});

// Add response interceptor for logging and metrics
axiosInstance.interceptors.response.use(
  response => {
    const duration = performance.now() - response.config.meta.startTime;
    logger.debug(`Request to ${response.config.url} completed in ${duration.toFixed(2)}ms`);
    return response;
  },
  error => {
    if (error.response) {
      // Server responded with a status code outside of our validateStatus range
      logger.warn(`Request failed with status ${error.response.status}: ${error.config.url}`);
    } else if (error.request) {
      // Request was made but no response received
      logger.error(`No response received for request to ${error.config.url}`);
    } else {
      // Something else happened in setting up the request
      logger.error(`Request setup error: ${error.message}`);
    }
    return Promise.reject(error);
  }
);

/**
 * Perform HTTP request with retries
 * @param {Object} config - Axios request config
 * @param {Number} retries - Number of retries
 * @returns {Promise<Object>} - Axios response
 */
async function request(config, retries = config.MAX_RETRIES || 2) {
  try {
    return await axiosInstance(config);
  } catch (error) {
    if (retries > 0 && shouldRetry(error)) {
      logger.info(`Retrying request to ${config.url}, ${retries} retries left`);
      return await request(config, retries - 1);
    }
    throw error;
  }
}

/**
 * Determine if request should be retried
 * @param {Error} error - Axios error
 * @returns {Boolean} - Whether to retry
 */
function shouldRetry(error) {
  // Retry on connection errors or 5xx server errors
  return !error.response || (error.response.status >= 500 && error.response.status < 600);
}

module.exports = {
  get: (url, params, options = {}) => request({ url, params, method: 'GET', ...options }),
  post: (url, data, options = {}) => request({ url, data, method: 'POST', ...options }),
  put: (url, data, options = {}) => request({ url, data, method: 'PUT', ...options }),
  delete: (url, options = {}) => request({ url, method: 'DELETE', ...options }),
  request,
  axiosInstance
};